(require 'postmodern)
(require 'simple-date)
(use-package 'my-util)

(in-package :operation)

(defun connect-patient ()
  (connect-toplevel "patient" "chang" "nfkc505" "10.52.20.51"))

(defclass operation ()
  ((op-id :accessor op-id
          :initform nil
          :initarg :op-id)
   (patient-id :accessor patient-id
               :initform nil
               :initarg :patient-id)
   (kanji-name :accessor kanji-name
               :initform nil
               :initarg :kanji-name)
   (zip-code :accessor zip-code
             :initform nil
             :initarg :zip-code)
   (address :accessor address
            :initform nil
            :initarg :address)
   (phone :accessor phone
         :initform nil
         :initarg :phone)
   (op-date :accessor op-date
            :initform nil
            :initarg :op-date)
   (start-time :accessor start-time
               :initform nil
               :initarg :start-time)
   (end-time :accessor end-time
             :initform nil
             :initarg :end-time)
   (preop-dx :accessor preop-dx
             :initform nil
             :initarg :preop-dx)
   (postop-dx :accessor postop-dx
              :initform nil
              :initarg :postop-dx)
   (procedure :accessor procedure
              :initform nil
              :initarg :procedure)
   (surgeons :accessor surgeons
             :initform nil
             :initarg :surgeons)
   (assistants :accessor assistants
               :initform nil
               :initarg :assistants)
   (indication :accessor indication
               :initform nil
               :initarg :indication)
   (op-note :accessor op-note
            :initform nil
            :initarg :op-note)
   (emergency :accessor emergency
              :initform nil
              :initarg :emergency)))


(defmethod print-object ((o operation) stream)
  (format stream "op-id: ~A~%Name: ~A~%Op-date: ~A~%Procedure: ~A~%Indication: ~A~%"
          (op-id o) (kanji-name o) (my-decode-date (op-date o)) (procedure o) (indication o)))

(defmethod latex-output ((o operation) stream)
  (format stream "op-id: ~A~%~%Name: ~A~%~%Op-date: ~A~%~%Procedure: ~A~%~%Indication: \\small{~A}~%"
          (op-id o) (kanji-name o) (my-decode-date (op-date o)) (procedure o) (indication o)))

(defmethod op-year ((o operation))
  (multiple-value-bind (year months day) (simple-date:decode-date (op-date o))
    year))

(defun make-instance-of-op-from-id (op-id)
  (multiple-value-bind
        (op-id patient-id kanji-name zip-code address op-date start-time end-time
               preop-dx postop-dx procedure surgeons assistants
               indication op-note emergency)
      (values-list
       (car (postmodern:query (:select
                               'o.op_id
                               'o.patient_id
                               'p.kanji_name
                               'p.zipcode
                               'p.address
                               'o.op_date
                               'o.start_time
                               'o.end_time
                               'o.preop_dx
                               'o.postop_dx
                               'o.procedure
                               'o.surgeons
                               'o.assistants
                               'o.indication
                               'o.op_note
                               'o.emergency
                               :from (:as 'op 'o)
                               :left-join (:as 'patient 'p)
                               :on (:= 'o.patient_id 'p.patient_id)
                               :where (:= 'o.op_id op-id)))))
    (make-instance 'operation
                   :op-id op-id
                   :patient-id patient-id
                   :kanji-name kanji-name
                   :zip-code zip-code
                   :address address
                   :phone (phone-list patient-id)
                   :op-date op-date
                   :start-time start-time
                   :end-time end-time
                   :preop-dx preop-dx
                   :postop-dx postop-dx
                   :procedure procedure
                   :surgeons surgeons
                   :assistants assistants
                   :indication indication
                   :op-note op-note
                   :emergency emergency)))

;;;phone-list: String -> list of string
;;;This function returns a list of phone numbers associated with the patient_id
(defun phone-list (pid)
  (let ((phonelist (postmodern:query (:select '* :from 'phone :where (:= 'patient_id pid)))))
        (mapcar #'(lambda (x) (strip-white-space (first x))) phonelist)))

                

(defmacro make-form-from-op (op action)
  `(:form :method "post" :accept-charset "utf8"
         :lang "JA"
         :enctype "multipart/form-data"
         :action ,action
         (:table :border 2 :bgcolor "olive"
                 (:tr
                  (:td (:input :type "text" :name "op-id" :value ,(op-id (eval op))))))))

(defun op-list-from-disease-id (disease-id)
  (mapcar #'make-instance-of-op-from-id
          (mapcar 'car (postmodern:query (:select 'o.op_id
                     :from (:as 'op 'o)
                            :left-join (:as 'op-diag 'od)
                            :on (:= 'o.op-id 'od.op-id)
                            :where
                            (:= 'od.disease_id disease-id))))))

;;;get-disease-id: string -> list of disease_id
(defun get-disease-id (text)
  (mapcar 'diag-data
          (mapcar 'car (postmodern:query (:select 'disease_id
                             :from 'diagnosis
                             :where (:in
                                     'disease_name_id
                                     (:select 'disease_name_id
                                              :from 'disease_name
                                              :where (:like 'disease_name
                                                            (concatenate 'string
                                                                         "%"
                                                                         text
                                                                         "%")))))))))

;;;diag-data: integer -> (integer string string string string)
;;;diag-data takes disease-id and returns the list of diasease-id, disease_name,
;;;major_div, patho_div, and location
(defun diag-data (disease-id)
  (funcall #'(lambda (x)
               (list
                disease-id
                (first x)
                (major-div (second x))
                (patho-div (third x))
                (location (fourth x))))
           (car
            (postmodern:query (:select 'dn.disease_name 'd.major_div_id
                                       'd.patho_div_id 'd.location_id
                                       :from (:as 'diagnosis 'd)
                                       :left-join (:as 'disease_name 'dn)
                                       :on (:= 'd.disease_name_id 'dn.disease_name_id)
                                       :where (:= 'd.disease_id disease-id))))))


;;;major-div: integer -> string
;;;This function takes a major_div_id and returns the name of the major division
(defun major-div (id)
	   (strip-white-space (caar (postmodern:query (:select 'major_div
			     :from 'majordiv
			     :where (:= 'major_div_id id))))))
;;;Same as major-div
(defun patho-div (id)
  (strip-white-space (caar (postmodern:query (:select 'patho_div
                                                      :from 'pathodiv
                                                      :where (:= 'patho_div_id id))))))
;;;Same as major-div
(defun location (id)
  (strip-white-space (caar (postmodern:query (:select 'location
                                                      :from 'location
                                                      :where (:= 'location_id id))))))


;(defgeneric print-op (operation))


(defmethod pprint-op ((op operation))
  (format t
          "Op-id: ~a~%Patient ID: ~a~%Patient Name: ~a~%Op date: ~a~%Preop Dx: ~a~%Procedure: ~a~%Indication: ~a~%Opnote: ~a~%~%"
          (op-id op) (patient-id op) (kanji-name op) (op-date op) (preop-dx op)
          (procedure op) (indication op) (op-note op)))

;;;get-accessor: symbol -> function
;;;This function takes a symbol that corresponds exactly to a field name of op table
;;;and returns a special accessor function that takes an instance of operation and returns that field
;;;of the instance.
(defun get-accessor (field)
  (case field
    ('patient_id #'(lambda (op) (patient-id op)))
    ('op_date #'(lambda (op) (op-date op)))
    ('start-time #'(lambda (op) (start-time op)))
    ('end-time #'(lambda (op) (end-time op)))
    ('preop_dx #'(lambda (op) (preop-dx op)))
    ('postop_dx #'(lambda (op) (postop-dx op)))
    ('procedure #'(lambda (op) (procedure op)))
    ('indication #'(lambda (op) (indication op)))
    ('op_note #'(lambda (op) (op-note op)))))

;;;update-op (operation symbol) :-> void
;;;This function takes an instance of operation and a symbol that corresponds to the exact
;;;word of a field in the op table, and updates that field on the op table
(defmethod update-op ((op operation) field)
  (postmodern:query (:update 'op
                             :set field (funcall (get-accessor field) op)
                             :where (:= 'op_id (op-id op)))))


;;;mean-follow-up: (int int int list-of-op) -> float
;;This function takes the integers for the month, day, year of the date of
;;;looking back and the lift of op, and returns the mean follow up days
(defun mean-follow-up (mm dd yyyy oplist)
  (float
   (/
     (- (encode-universal-time 0 0 0 dd mm yyyy)
           (statistics:mean (mapcar #'my-util:simple-date-2-utime (mapcar #'op-date oplist))))
        60 60 24)))

;;;prep-id: string -> string
;;;This function takes a string of patient_id, and adds "0"s to its head
;;;to make it a string of eight characters
(defun prep-id (id)
	   (let ((num (length id)))
	     (cond
	       ((< num 8)
		(dotimes (x (- 8 num))
		  (setf id (concatenate 'string "0" id)))
		id)
	       (t id))))

;;;strip-cr-from-op: integer -> void
;;;This function takes an op-id, and queries the indication and op_note from the op table
;;;and strips the unnecessary \r
(defun strip-cr-from-op (op-id)
	   (multiple-value-bind
		 (ind-string opnote-string)
	       (values-list 
		(car (postmodern:query (:select 'indication 'op_note
						:from 'op :where (:= 'op_id op-id)))))
	     (postmodern:query (:update 'op
					:set 'indication (cl-ppcre:regex-replace-all "\\r" ind-string "")
					'op_note (cl-ppcre:regex-replace-all "\\r" opnote-string "")
					:where
					(:= 'op_id op-id)))))

(defun opnotes (oid)
  (postmodern:query (:select 'indication 'op_note
                             :from 'op
                             :where (:= 'op_id oid))))