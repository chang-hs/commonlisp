(defvar *doctors* '(cho suzuki nakamura tsuchiya fujisawa shimada okano));Average weekly money from kitami; 27 * 12 / 52 = 6.21,  If divided by two persons: 6.21 / 2 = 3.11(defvar *kitami* '((fujisawa . 3) (nakamura . 3)))(defvar *workplaces* nil)(defclass workplace ()	   ((name :initarg :name		  :accessor workplace-name		  :initform nil)	    (pay :initarg :pay		 :accessor workplace-pay		 :initform nil)	    (day-of-week :initarg :day-of-week			 :accessor workplace-day-of-week)	    (list-of-doctors :accessor workplace-list-of-doctors			     :initform nil)))(defclass doctor ()	   ((name :initarg :name		  :accessor doctor-name)	    (pay-range :initform '(7 9)		       :initarg :pay-range		       :accessor doctor-pay-range)	    (disallowed-days :initarg :disallowed-days			     :accessor doctor-disallowed-days)	    (total-pay :initform nil		       :initarg :total-pay		       :accessor doctor-total-pay)            (initial-plus :initform nil                          :accessor doctor-initial-plus                          :initarg :initial-plus)	    (workplaces :initform nil			:accessor doctor-workplaces)))(defmethod print-object ((w workplace) stream)  "Override print-object for the class workplace"	   (format stream "<~a, ~a, ~a>"                   (workplace-name w)                   (workplace-day-of-week w)                   (workplace-pay w)))(defun add-workplace (name dow pay)  "Add a workplace to *workplaces*"	   (setf *workplaces*		 (cons (make-instance 'workplace				      :name name				      :day-of-week dow				      :pay pay)		       *workplaces*)))(add-workplace 'sekishindo-mon 'mon 4)(add-workplace 'sekishindo-sat 'sat 4)(add-workplace 'ikebukuro-wed 'wed 10)(add-workplace 'ikebukuro-sat 'sat 4)(add-workplace 'mitsui 'thu 4)(add-workplace 'kouseikai 'thu 5)(add-workplace 'musashino 'thu 4.5)(add-workplace 'suzuki 'mon 8)(defun kitami-money (doctor-name)  "Calculate the average weekly money obtained from kitami"  (let ((found (assoc doctor-name *kitami*)))    (if found	   (rest found)           0)))(defun get-workplace (wp-name)  "Get the location of the named workplace from *workplaces*"	   (find wp-name *workplaces*		 :key #'workplace-name :test #'eql))(defun set-pay-list (wpname lst)  "set the pay-list of the named workplace"	   (setf (workplace-list-of-doctors (get-workplace wpname))		 lst))(set-pay-list 'suzuki '((cho . 1.0)))(set-pay-list 'musashino '((shimada . 0.5) (okano . 0.5)))(set-pay-list 'kouseikai '((shimada . 0.5) (okano . 0.5)))(set-pay-list 'ikebukuro-sat '((suzuki . 1.0)))(set-pay-list 'ikebukuro-wed '((nakamura . 0.5) (fujisawa . 0.5)))(set-pay-list 'sekishindo-sat '((tsuchiya . 1.0)))(set-pay-list 'sekishindo-mon '((suzuki . 1.0)))(set-pay-list 'mitsui '((tsuchiya . 1.0)))(defmethod pay-for-doctor ((wp workplace) doctor)  "calculate the pay for named doctor from the workplace"   (let ((rate	 (rest          (assoc doctor (workplace-list-of-doctors wp)))))     (if (numberp rate)         (* rate (Workplace-pay wp))         0)))(defun total-pay (doctor-name)  "calculate total pay for the designated doctor"	   (apply #'+		  (cons (kitami-money doctor-name)                          (mapcar #'(lambda (x) (pay-for-doctor x doctor-name))                                  *workplaces*))))(defun show-pay (doctor-name stream)  "print the name and the total-pay of the designated doctor"  (format stream "~&~a: ~a" doctor-name (total-pay doctor-name)))(defun show-pay-table (stream)  "prints the pay for all the doctors"  (mapcar #'(lambda (x) (show-pay x t)) *doctors*))(defmethod show-doctor-list ((wp workplace) stream)  "prints the pay-list of the workplace to the designated stream"	   (if (workplace-list-of-doctors wp)	       (format stream "~&~a(~a):(~a) ~{~a, ~}"		       (workplace-name wp)                       (workplace-pay wp)                       (workplace-day-of-week wp)		       (workplace-list-of-doctors wp))	       (format stream "~&~a:" (workplace-name wp))))(defun show-list (stream)  "prints the registered doctor list for all the workplaces"  (mapcar #'(lambda (x) (show-doctor-list x t)) *workplaces*))(defun show-result ()  "Prints the pay structure, and then prints the table of doctors with each earning"	   (show-list t)	   (format t "~&------------------------")	   (show-pay-table t))(defun reset-plan (plan)  "Resets the list-of-doctors of  the workplaces according to the given a-list"	   (mapc (lambda (x)		   (set-pay-list (first x) (rest x))) plan))(setf *plan-1* '((suzuki . ((cho . 1.0)))                 (musashino . ((shimada . 0.5) (okano . 0.5)))                 (kouseikai . ((shimada . 0.5) (okano . 0.5)))                 (ikebukuro-sat . ((suzuki . 1.0)))                 (ikebukuro-wed . ((nakamura . 0.5) (fujisawa . 0.5)))                 (sekishindo-sat . ((tsuchiya . 1.0)))                 (sekishindo-mon . ((suzuki . 1.0)))                 (mitsui . ((tsuchiya . 1.0)))))(setf *plan-2* '((suzuki . ((nakamura . 0.25) (cho . 0.25) (suzuki . 0.25) (tsuchiya . 0.25)))                  (musashino . ((shimada . 0.5) (okano . 0.5)))                  (kouseikai . ((shimada . 0.5) (okano . 0.5)))                  (ikebukuro-sat . ((suzuki . 0.5) (cho . 0.5)))                  (ikebukuro-wed . ((nakamura . 0.25) (fujisawa . 0.5) (cho . 0.25)))                  (sekishindo-sat . ((tsuchiya . 0.75) (fujisawa . 0.25)))                  (sekishindo-mon . ((suzuki . 0.75) (cho . 0.25)))                  (mitsui . ((tsuchiya . 0.75) (suzuki . 0.25)))))(setf *plan-3* '((suzuki . ((nakamura . 1/4) (cho . 1/2) (tsuchiya . 1/4)))                  (musashino . ((shimada . 0.5) (okano . 0.5)))                  (kouseikai . ((shimada . 0.5) (okano . 0.5)))                  (ikebukuro-sat . ((suzuki . 0.5) (cho . 0.5)))                  (ikebukuro-wed . ((nakamura . 2/5) (fujisawa . 2/5) (suzuki . 1/5)))                  (sekishindo-sat . ((tsuchiya . 0.75) (fujisawa . 0.25)))                  (sekishindo-mon . ((suzuki . 0.75) (cho . 0.25)))                  (mitsui . ((tsuchiya . 0.75) (suzuki . 0.25)))))